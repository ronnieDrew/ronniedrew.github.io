<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Azure | Brewing Code]]></title>
  <link href="http://www.brewingcode.com/blog/categories/azure/atom.xml" rel="self"/>
  <link href="http://www.brewingcode.com/"/>
  <updated>2015-12-15T10:49:22+00:00</updated>
  <id>http://www.brewingcode.com/</id>
  <author>
    <name><![CDATA[Ronan Gibney]]></name>
    <email><![CDATA[ronnieDrew@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Windows Azure Table Explorer]]></title>
    <link href="http://www.brewingcode.com/blog/2013/08/10/windows-azure-table-explorer/"/>
    <updated>2013-08-10T09:04:00+00:00</updated>
    <id>http://www.brewingcode.com/blog/2013/08/10/windows-azure-table-explorer</id>
    <content type="html"><![CDATA[<p>This morning I was reading back over the archives of Jeff Wilcox's blog and came across <a href="http://www.jeff.wilcox.name/2013/04/windows-azure-table-explorer/">this post</a> detailing a Single Page App that he built for browsing table service data on an Azure storage account.</p>

<p>As I've been learning <a href="http://emberjs.com/">Ember</a> I thought it would be fun to take the jQuery front end and replace it with Ember.</p>

<!--more-->


<h3>Overview</h3>

<p>So first thing I'll just do a quick run through Jeff's application as it stands (you can find the GitHub repo <a href="https://github.com/jeffwilcox/azure-table-explorer">here</a>).</p>

<p>The application is up and running on Azure websites here <a href="https://waztable.azurewebsites.net/">https://waztable.azurewebsites.net/</a> and allows you to browse the Table Service data for a particular Storage Account.</p>

<p>Jeff is using the <a href="https://github.com/WindowsAzure/azure-sdk-for-node">Windows Azure SDK for Node</a> to build a simple API in Node for his client side app. All requests to this API need to provide credentials which are the storage account name and access key, invalid credentials are rejected with a HTTP 401 error.</p>

<p><code>GET /json/table/?account={storage-account}&amp;key={storage-key}</code> - returns a list of tables defined on the storage account.
<code>json Response
{
  "ok":true,
  "result":{
    "tables":["logs","people"],
    "name":"brewingcode"
  }
}
</code></p>

<p><code>GET /json/table/{table-name}?account={storage-account}&amp;key={storage-key}&amp;top={results-per-page}&amp;nextPartitionKey={partition-key}&amp;nextRowKey={row-key}</code> - returns a number of records specified by the <code>top</code> parameter for the specified table. If more records are available a continuation token will also be returned, this can the be used in subsequent requests to page through remaining records via the optional <code>nextPartitionKey</code> &amp; <code>nextRowKey</code> parameters.
<code>json Response
{
  "ok":true,
  "table":{
    "continuation":{"nextPartitionKey":"1!8!bG9ncw--","nextRowKey":"1!4!Mjc-"},
    "rows":[
      {
        "_":{
          "id":"https://brewingcode.table.core.windows.net/logs(PartitionKey='logs',RowKey='18')",
          "link":"logs(PartitionKey='logs',RowKey='18')",
          "updated":"2013-12-05T15:26:07Z",
          "etag":"W/\"datetime'2013-11-18T16%3A09%3A20.1183355Z'\""},
          "PartitionKey":"logs",
          "RowKey":"18",
          "Timestamp":"2013-11-18T16:09:20.118Z",
          "Level":"info",
          "Message":"Message - 18"
        },
        // ...
    ]
  }
}
</code></p>

<p><code>DELETE /json/table/{table-name}/{partition-key}/{row-key}?account={storage-account}&amp;key={storage-key}</code> - deletes the specified row from the table.
<code>json Response
{
  "ok":true,
  "response":{
    "isSuccessful":true,
    "statusCode":204,
    "headers":{
      // ...
    }
  }
}
</code></p>

<h2>Front end</h2>

<p>The UI itself is very simple and consists of the following pages.</p>

<p>First we have the login/credentials page where you enter your storage account name and access key.</p>

<p><img src="/images/posts/2013-08-06-windows-azure-table-explorer/credentials-page.png" alt="Credentials page" /></p>

<p>If you've provided valid credentials then you'll see a listing of all the tables defined in the specified storage account.</p>

<p><img src="/images/posts/2013-08-06-windows-azure-table-explorer/storage-account-tables.png" alt="Storage Account table listing" /></p>

<p>Finally you can then select and view table data as seen below. Multiple rows can be selected which activates a master/detail view and the option to delete the selection items as seen in the 2nd screen shot.</p>

<p><img src="/images/posts/2013-08-06-windows-azure-table-explorer/table-listing.png" alt="Storage Account table listing" /></p>

<p><img src="/images/posts/2013-08-06-windows-azure-table-explorer/table-list-with-selected-items.png" alt="Storage Account table listing with multiple items selected" /></p>

<h2>Ember Tooling</h2>

<p>Before we get into converting this into Ember we need to talk a little about tooling. If you're building an application with Ember then you're going to need to have some kind of tooling/build process in place. At the moment I like to use <a href="http://yeoman.io">Yeoman</a> for this.</p>

<p>For those of you have haven't heard of it before Yeoman is a collection of <a href="http://gruntjs.com/">Grunt</a> build scripts, <a href="https://github.com/yeoman/yo">scaffolding tools</a>, Twitters <a href="http://bower.io/">Bower</a> package manager and a bunch of opinion.</p>

<p>On Windows assuming you have <a href="http://chocolatey.org/">Chocolatey</a> installed (and if not why not?) then getting Yeoman installed is as simple as...</p>

<pre><code class="powershell">cinst Yeoman
</code></pre>

<p>With Yeoman installed next we'll want to add the scaffolding support for the Ember tools.</p>

<pre><code class="powershell">npm install -g generator-ember
</code></pre>

<p>With that we'll create a directory for our app and use the Yeoman scaffolding tools for Ember to create a basic structure.</p>

<pre><code class="powershell">mkdir emberapp
cd emberapp
yo ember
</code></pre>

<p>This will create the directory structure seen below.</p>

<p><img src="/images/posts/2013-08-06-windows-azure-table-explorer/yeoman-directory-structure.png" alt="Yeoman directory structure" /></p>

<p>The files/directories in the root directory to call out are.</p>

<ul>
<li><code>bower.json</code> - a list of packages from Bower that we are using in our app.</li>
<li><code>Grunt.js</code> - the Grunt file contains the build scripts for our application, specifically we'll be using the following commands.

<ul>
<li><code>grunt server</code> - runs your application in preview mode at <code><a href="http://localhost:4000">http://localhost:4000</a></code>. The file system is monitored for changes and the application is re-built as required.</li>
<li><code>grunt test</code> - runs your application unit tests inside <a href="http://phantomjs.org">PhantomJS</a></li>
<li><code>grunt</code> - builds the application in release mode and ready for deployment, the output of this task is created in the <code>dist</code> directory.</li>
</ul>
</li>
<li><code>packages.json</code> - a list of the npm packages required by Yeoman.</li>
<li><code>.\app</code> - contains the source code for the Ember application.</li>
<li><code>.\dist</code> - when the application is built in release mode the output of the task will be copied to this directory.</li>
<li><code>.\test</code> - contains your unit tests for the application.</li>
</ul>


<p>Before we use <code>npm install</code> to get all the required node modules for our application we need to make a small alternation to the <code>packages.json</code> that was just created the <code>emberapp</code> directory. There is problem with the <code>grunt-contrib-imagemin</code> module on Windows. It depends on <code>jpegtran-bin</code> and the latest version of this can't be built from source on Windows and thus installed via npm. Instead we can specify the previous version in the <code>package.json</code>, this should be above <code>grunt-contrib-imagemin</code>.</p>

<pre><code class="json packages.json">    // ...
    "jpegtran-bin": "0.2.0",
    "grunt-contrib-imagemin": "~0.2.0",
    // ...
</code></pre>

<p>With this alteration in place you can go ahead and run <code>npm install</code> to get all the required dependencies.</p>

<p>So at this point we will have the basic structure of our Ember app scaffolded out and everything is ready to be built and run. We can boot the app with the <code>grunt server</code> command, this will run the app on <code><a href="http://localhost:4000">http://localhost:4000</a></code>.</p>

<h3>Ember Concepts</h3>

<p>Now we are ready to start building out the app however before that I'll just do a super quick run down through the main components in Ember.</p>

<ul>
<li><code>Router</code> - Used to define routes for your application. In Ember URLs contain the state required for the Router to create a corresponding set of Controllers, Routes &amp; Templates that are needed to restore the app to the point defined by the URL.</li>
<li><code>Routes</code> - a Route is responsible for loading a model and rendering a template into an outlet.</li>
<li><code>Model</code> - a Model holds data that is persisted on the server, in our case Models will be created from the JSON returned by the API defined at the top of the post.</li>
<li><code>Controller</code> - a Controller proxies it's related model and can be used to add any UI specific properties or functionality required. Coming from a XAML background I like to think of Ember Controllers as what we would call a ViewModel in XAML world.</li>
<li><code>Template</code> - Ember uses the <a href="http://handlebarsjs.com/">Handlebars</a> templating language. A Template is bound to a Controller and is responsible for rendering UI for a specific portion of the page which is known as an Outlet. Templates can also contain Outlets so you can easily build your UI with multiple templates nested within each other.</li>
<li><code>View</code> - in Ember Views are used when you need more control over exactly how the DOM is manipulated, typically they are quite useful when integrating with other libraries such as jQuery plugins.</li>
</ul>


<p>Finally we'll have a quick look at the <code>.\app</code> directory which contains the source for our Ember application.</p>

<p><img src="/images/posts/2013-08-06-windows-azure-table-explorer/ember-app-structure.png" alt="Ember application directory structure" /></p>

<ul>
<li><code>.\bower_components</code> - packages referenced in bower.json are stored in this directory.</li>
<li><code>.\img</code> - We're using Bootstrap so this directory contains some glyphicon image files.</li>
<li><code>.\scripts</code> - the JavaScript source. In the root we have a file app.js which is the application entry point, after that we have separate sub-directories for our various Ember components e.g. controllers, models, routes &amp; views.</li>
<li><code>.\styles</code> - contains the SASS source used to produce our CSS.</li>
<li><code>.\templates</code> - Handlebars templates</li>
<li><code>index.html</code> - the container for our Ember application.</li>
</ul>


<p>An excerpt of the index.html file is listed below, the important parts are the <code>build:js</code> snippets. Yeoman uses these markers to insert Bower libraries, Handlebars templates and the application source itself. Depending on the grunt task executed what's injected into these placeholders will be different, for example when running <code>grunt</code> the application is built in release mode and so files are concatenated, minified &amp; uglified.</p>

<pre><code class="html index.html">&lt;!DOCTYPE html&gt;
    // ...
    &lt;body&gt;
        &lt;!-- build:js scripts/components.js --&gt;
        &lt;script src="bower_components/jquery/jquery.js"&gt;&lt;/script&gt;
        &lt;script src="bower_components/momentjs/moment.js"&gt;&lt;/script&gt;        
        &lt;script src="bower_components/underscore/underscore.js"&gt;&lt;/script&gt;
        &lt;script src="bower_components/handlebars/handlebars.runtime.js"&gt;&lt;/script&gt;
        &lt;script src="bower_components/ember/ember.js"&gt;&lt;/script&gt;
        &lt;!-- endbuild --&gt;

        &lt;!-- build:js(.tmp) scripts/templates.js --&gt;
        &lt;script src="scripts/compiled-templates.js"&gt;&lt;/script&gt;
        &lt;!-- endbuild --&gt;

        &lt;!-- build:js(.tmp) scripts/main.js --&gt;
        &lt;script src="scripts/combined-scripts.js"&gt;&lt;/script&gt;
        &lt;!-- endbuild --&gt;

        &lt;!-- build:js scripts/plugins.js --&gt;
        &lt;script src="bower_components/bootstrap-sass/js/bootstrap-affix.js"&gt;&lt;/script&gt;
        &lt;script src="bower_components/bootstrap-sass/js/bootstrap-alert.js"&gt;&lt;/script&gt;
        // ...
        &lt;!-- endbuild --&gt;
    &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<h2>Replacing jQuery with Ember</h2>

<p>The first thing you want to do when starting an Ember app is to get your routes defined. Below are the route definitions for the app, I've also included comments for routes that Ember will create by itself. Ember is a very convention based framework and in particular route names are important as these are used in the controller, model, route &amp; template naming conventions.</p>

<pre><code class="javascript Application Routes">App.Router.map(function () {

  // application
  // index

  this.resource("tables", function() {
    // tables.index

    this.resource("table", { path: ":table_id" }, function() {
      // table.index

      this.route("page", { path: ":page_id" } );
    });
  });

});
</code></pre>

<p>With these routes defined we can start fleshing out the templates and layout of our application. The <code>application.hbs</code> template will be rendered by Ember when your application starts so it's the place to define your page layout structure. The header and footer sections have been created as separate template fragments <code><em>header.hbs</code> and <code></em>footer.hbs</code> and are included using the <code>{{partial "{template-name}"}}</code> helper. Note that partial templates must always be named with an underscore prefix however this prefix is excluded when using the partial helper. e.g. A partial template <code>_header.hbs</code> is included in a template using <code>{{partial "header"}}</code>. Also the binding context of the partial is not changed, the fragment is just treated as if it were inline with the main template.</p>

<p>Along with partials we also have two outlets defined in this template. Outlets are just placeholders that other templates can be rendered into. Templates can have a single default outlet which is not given a name, if a template has multiple outlets then the non-default items must be allocated unique names. In this case we have a separate outlet for modal dialogs which will be covered later in the post.</p>

<p>
<figure class='code'><figcaption><span>application.hbs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{{partial &quot;header&quot;}}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;container&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    {{outlet}}
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;hr/&gt;</span>
</span><span class='line'>
</span><span class='line'>    {{partial &quot;footer&quot;}}
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>{{outlet &quot;modalOutlet&quot;}}
</span></code></pre></td></tr></table></div></figure>
</p>

<p>The next default template that Ember will render is the <code>index.hbs</code> template. As we want the landing page of our application to be the credentials/login screen we will create an <code>IndexController</code> that will be bound to this template and control the credentials/login process.</p>

<pre><code class="javascript IndexController.js">App.IndexController = Ember.ObjectController.extend({
    storageAccount: "",
    storageKey: "",
    attemptedTransition: null,
    credentials: null,

    usingSSL: function() {
        return (document.location.protocol === "https:");
    }.property(),

    loginDisabled: function() {
        var credentials = this.getProperties("storageAccount", "storageKey");

        if (credentials.storageAccount.length &gt; 0 &amp;&amp; credentials.storageKey.length &gt; 0 ) {
            return false;
        }

        return true;

    }.property("storageAccount", "storageKey"),

    login: function() {
        var self = this,
            credentials = this.getProperties("storageAccount", "storageKey"),
            attemptedTransition = this.get("attemptedTransition"),
            tables = App.Tables.find(credentials);

        tables.then(function(data) {
            // success
            self.set("credentials", credentials);

            if (attemptedTransition) {
                attemptedTransition.retry();
                self.set("attemptedTransition", null);
            } else {
                self.transitionToRoute("tables.index");
            }

        }, function(reason) {
            // failure
            self.set("credentials", null);
            self.send("error", reason);
        });

    }
});
</code></pre>

<ul>
<li><code>storageAccount</code> - bound to the corresponding input element in the template.</li>
<li><code>storageKey</code> - as above.</li>
<li><code>attemptedTransition</code> - route transitions can be cancelled if the application doesn't have valid credentials. If this is the case the application will redirect back to the index route and store the originally attempted route transition here. If the credentials/login is successful we can then retry the original transition and return the app to the requested URL.</li>
<li><code>credentials</code> - If the supplied <code>storageAccount</code> and <code>storageKey</code> are valid then these credentials will be stored here and used for subsequent API requests throughout the app.</li>
<li><code>usingSSL</code> - true/false depending on whether the page is using SSL. This is used to toggle the warning message within the template that is displayed if the page is not using SSL.</li>
<li><code>loginDisabled</code> - toggles whether the "Explore" button is enabled/disabled. This is a computed field and is dependent on the <code>storageAccount</code> &amp; <code>storageKey</code> fields, if either field is empty then the button is disabled.</li>
<li><code>login</code> - handles the click action of the "Explore" button. This action will use the method <code>App.Tables.find</code> passing the credentials entered by the user, this returns a promise &amp; when it resolves successfully we will store the credentials and redirect to the appropriate route. If the promise resolves with an error then credentials are cleared and we send an error message. This will eventually bubble up to the <code>ApplicationRoute</code> which will in turn trigger a modal dialog to display an error message.</li>
</ul>


<p>Below is the template that will be bound to the <code>IndexController</code>. What we are doing here is binding some CSS classes to corresponding properties on the controller using the <code>{{bindAttr}}</code> helper. This helper can be used to bind any element attribute to a corresponding property on the controller.</p>

<p>We then use the <code>Ember.TextField</code> view to create a text and password type input fields and bind them to the storageAccount and storageKey fields on the controller.</p>

<p>Finally the click action on the "Explore" button is set to be handled by the <code>login</code> function on our controller.</p>

<p>
<figure class='code'><figcaption><span>index.hbs</p></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;credentials&quot;</span> <span class="na">class=</span><span class="s">&quot;hero-unit&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;h1&gt;</span>Explore a storage account<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;nossl&quot;</span> <span class="err">{{</span><span class="na">bindAttr</span> <span class="na">class=</span><span class="s">&quot;:alert :alert-block usingSSL:hide:show&quot;</span><span class="err">}}</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;h4&gt;</span>Security Warning!<span class="nt">&lt;/h4&gt;</span>
</span><span class='line'>    <span class="nt">&lt;p&gt;</span>You are not currently browsing this site through an encrypted SSL session. If you submit your
</span><span class='line'>    Windows Azure storage account name and access key, this information will be sent over the
</span><span class='line'>    wire unencrypted. Don&#39;t do it. Please.<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;p</span> <span class="na">id=</span><span class="s">&quot;ssl&quot;</span> <span class="err">{{</span><span class="na">bindAttr</span> <span class="na">class=</span><span class="s">&quot;usingSSL:show:hide&quot;</span><span class="err">}}</span><span class="nt">&gt;</span>
</span><span class='line'>    You&#39;re using an SSL connection with this cloud service - your credentials will be transmitted securely. The credentials are sent with every dynamic request and immediately destroyed.
</span><span class='line'>  <span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;p&gt;</span>
</span><span class='line'>    {{view Ember.TextField valueBinding=&quot;storageAccount&quot; placeholder=&quot;Storage account&quot; class=&quot;span5&quot;}}
</span><span class='line'>  <span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;input-prepend&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;add-on&quot;</span><span class="nt">&gt;&lt;i</span> <span class="na">class=</span><span class="s">&quot;icon-lock&quot;</span><span class="nt">&gt;&lt;/i&gt;&lt;/span&gt;</span>
</span><span class='line'>    {{view Ember.TextField valueBinding=&quot;storageKey&quot; placeholder=&quot;Access account&quot; type=&quot;password&quot; class=&quot;span5&quot;}}
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;p&gt;</span>
</span><span class='line'>    <span class="nt">&lt;button</span> <span class="na">class=</span><span class="s">&quot;btn btn-primary&quot;</span> <span class="err">{{</span><span class="na">action</span> <span class="na">login</span><span class="err">}}</span> <span class="err">{{</span><span class="na">bindAttr</span> <span class="na">disabled=</span><span class="s">&quot;loginDisabled&quot;</span><span class="err">}}</span> <span class="na">id=</span><span class="s">&quot;setCredentials&quot;</span><span class="nt">&gt;</span>Explore <span class="ni">&amp;raquo;</span><span class="nt">&lt;/button&gt;</span>
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;https://github.com/jeffwilcox/azure-table-explorer&quot;</span> <span class="na">class=</span><span class="s">&quot;btn&quot;</span> <span class="na">target=</span><span class="s">&quot;_blank&quot;</span><span class="nt">&gt;</span>App source <span class="ni">&amp;raquo;</span><span class="nt">&lt;/a&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span>
</span><span class='line'>
</span><span class='line'>####Models
</span><span class='line'>In order to build out the rest of the application we&#39;ll need to go ahead and create the various models that we will need we are..
</span><span class='line'>
</span><span class='line'>* <span class="ni">&amp;lt;</span>code<span class="ni">&amp;gt;</span>Tables<span class="ni">&amp;lt;</span>/code<span class="ni">&amp;gt;</span> - storage account details and a list of associated tables.
</span><span class='line'>* <span class="ni">&amp;lt;</span>code<span class="ni">&amp;gt;</span>Table<span class="ni">&amp;lt;</span>/code<span class="ni">&amp;gt;</span> - table id and a list of continuation tokens that are required for pagination.
</span><span class='line'>* <span class="ni">&amp;lt;</span>code<span class="ni">&amp;gt;</span>Page<span class="ni">&amp;lt;</span>/code<span class="ni">&amp;gt;</span> - A set of rows for a particular table.
</span><span class='line'>* <span class="ni">&amp;lt;</span>code<span class="ni">&amp;gt;</span>Row<span class="ni">&amp;lt;</span>/code<span class="ni">&amp;gt;</span> - A individual table record.
</span><span class='line'>
</span><span class='line'>As we are not using Ember Data we&#39;ll just extend <span class="ni">&amp;lt;</span>code<span class="ni">&amp;gt;</span>Ember.Object<span class="ni">&amp;lt;</span>/code<span class="ni">&amp;gt;</span> when creating our models. The <span class="ni">&amp;lt;</span>code<span class="ni">&amp;gt;</span>Ember.Object.extend<span class="ni">&amp;lt;</span>/code<span class="ni">&amp;gt;</span> method is used to define properties for each model, once defined an instance of the <span class="ni">&amp;lt;</span>code<span class="ni">&amp;gt;</span>Tables<span class="ni">&amp;lt;</span>/code<span class="ni">&amp;gt;</span> model can be created using the <span class="ni">&amp;lt;</span>code<span class="ni">&amp;gt;</span>App.Tables.create<span class="ni">&amp;lt;</span>/code<span class="ni">&amp;gt;</span> method. The <span class="ni">&amp;lt;</span>code<span class="ni">&amp;gt;</span>reopenClass<span class="ni">&amp;lt;</span>/code<span class="ni">&amp;gt;</span> method can be used to add static properties and methods to the model.
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>App.Tables = Ember.Object.extend({
</span><span class='line'>    id: null,
</span><span class='line'>    tables: null
</span><span class='line'>});<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>App.Tables.reopenClass({
</span><span class='line'>  find: function(credentials) {<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span>var requestData = {
</span><span class='line'>  account: credentials.storageKey ? credentials.storageAccount : undefined,
</span><span class='line'>  key: credentials.storageKey,
</span><span class='line'>  top: 10
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>return Ember.RSVP.Promise(function(resolve, reject) {
</span><span class='line'>
</span><span class='line'>    App.ajax(&quot;/json/table&quot;, {data: requestData}).then(function(value) {
</span><span class='line'>      // success
</span><span class='line'>      resolve(
</span><span class='line'>        App.Tables.create({
</span><span class='line'>          id: value.result.name,
</span><span class='line'>          tables: _.map(value.result.tables, function(item) {
</span><span class='line'>            return App.Table.create({id: item});
</span><span class='line'>          })
</span><span class='line'>        })
</span><span class='line'>      );
</span><span class='line'>    }, function(error) {
</span><span class='line'>      // fail
</span><span class='line'>      reject(error);
</span><span class='line'>    });
</span><span class='line'>
</span><span class='line'>});
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  }
</span><span class='line'>});
</span></code></pre></td></tr></table></div></figure>
* <code>id</code> - the storage account name.
* <code>tables</code> - a list of <code>App.Table</code> objects.
* <code>find</code> - uses an internal Ajax helper to make the API request, this helper returns a promise. The <code>find</code> method itself returns a promise that wraps that returned by the ajax helper, when the ajax promise resolves the JSON response is unpacked and converted into an <code>App.Tables</code> instance.</p>

<pre><code class="javascript Table.js">App.Table = Ember.Object.extend({
    id: null,
  continuationTokens: null
});
</code></pre>

<ul>
<li><code>id</code> - the table name, this is unique within the storage account.</li>
<li><code>continuationTokens</code> - a list of continuation tokens that are required for pagination. This will be covered in more detail later in the post.</li>
</ul>


<pre><code class="javascript Page.js">App.Page = Ember.Object.extend({
    id: null,
    continuation: null,
    rows: null
});

App.Page.reopenClass({
  find: function(tableName, credentials, pageId, continuation) {

    var partitionKey,
      requestData = {
      account: credentials.storageKey ? credentials.storageAccount : undefined,
      key: credentials.storageKey,
      top: 10
    };

    // ...
  }
});
</code></pre>

<ul>
<li><code>id</code> - the page number.</li>
<li><code>continuation</code> - if more results are available after the current page then this will contain the continuation token returned by Azure.</li>
<li><code>rows</code> - a list of <code>App.Row</code> instances that make up the page results.</li>
<li><code>find</code> - as with <code>App.Tables.find</code> this returns a promise that will eventually resolve to return an instance of an <code>App.Page</code> model.</li>
</ul>


<pre><code class="javascript Row.js">App.Row = Ember.Object.extend({
    id: null,
    PartitionKey: null,
    RowKey: null,
    isSelected: false,
    partitionKeyChanged: false
});
</code></pre>

<ul>
<li><code>id</code> - a unique id for the row, this is a combination of the <code>PartitionKey</code> &amp; <code>RowKey</code>.</li>
<li><code>PartitionKey</code> - the Azure table service partition key.</li>
<li><code>RowKey</code> - the Azure table service row key.</li>
<li><code>isSelected</code> - this probably shouldn't be a property on the model, it's used to toggle the selection status of rows within the table.</li>
<li><code>partitionKeyChanged</code> - as above this property is used when rendering the table, when the partition key is different from the previous row a new partition key header is rendered.</li>
</ul>


<h4>Authentication</h4>

<p>In order to use the application a valid set of credentials needs to be defined. Outside of the login/landing page none of the other routes should be accessible without valid credentials, instead we just want to redirect back to the login page. If valid credentials are subsequently entered we can then redirect back to the original route that was requested.</p>

<p>This is easy to do in Ember, what we can do is define an <code>AuthenticatedRoute</code> as seen below and have all the routes that require credentials extend from this.</p>

<p>We can use the <code>beforeModel</code> hook on the route which allows us to cancel the current route transition and redirect elsewhere. In the <code>_redirectToLogin</code> function we grab an instance of the <code>index</code> controller and then set the currently attempted route transition before redirecting the index route itself. This allows us to redirect back to the original requested route if needed.</p>

<p>Finally we can use the <code>events</code> hash to define an event handler for any errors that bubble up to the route. The Node API will throw a HTTP 401 Unauthorized error for any requests with invalid credentials, in this case we can also just redirect back to the login page. For any other errors we will just re-throw the error which will eventually be handled by the <code>Application</code> route.</p>

<pre><code class="javascript AuthenticatedRoute.js">App.AuthenticatedRoute = Ember.Route.extend({
    credentials: null,

    _redirectToLogin: function(transition) {
        var indexController = this.controllerFor("index");

        indexController.set("attemptedTransition", transition);
        this.transitionTo("index");
    },

    beforeModel: function(transition) {
        var credentials = this.controllerFor("index").get("credentials");

        if (!credentials) {
            this._redirectToLogin(transition);
        } else {
            this.set("credentials", credentials);
        }
    },

    events: {
        error: function(reason, transition) {
            if (reason.status === 401) {
                this._redirectToLogin(transition);
            } else {
                throw {error: reason, transition: transition};
            }
        }
    }
});
</code></pre>

<pre><code class="javascript ApplicationRoute.js">App.ApplicationRoute = Ember.Route.extend({

  events: {
    error: function(error) {
      var errorController = this.router.container.lookup("controller:error");

      errorController.set("model", error);

      this.render("errorModal", {
        into: "application",
        outlet: "modalOutlet",
        controller: errorController
      });
    },

    closeModal: function() {
      this.render("emptyTemplate", {
        into: "application",
        outlet: "modalOutlet"
      });
    }
  }

});
</code></pre>

<ul>
<li><code>events</code> - in <code>ApplicationRoute</code> the <code>events</code> hash lets us define application wide handlers for certain items. For example in <code>BootstrapModalView</code> we trigger a <code>closeModal</code> event, this will then bubble up through the corresponding <code>Controller</code>, <code>Route</code> and finally <code>ApplicationRoute</code> until it is handled.</li>
<li><code>error</code> - used to provide an application wide hook for any unhandled errors, once an error is caught a modal dialog is displayed.</li>
<li><code>closeModal</code> - closes the currently opened modal dialog, to do this we just render an empty template into the modal outlet.</li>
</ul>


<h4>Modal Dialogs</h4>

<p>We are using the Bootstrap modal dialog to display errors that occur in the application. When we want to use other libraries that manipulate the DOM we need to do a little bit of work to ensure that whatever we are using doesn't step on Embers toes and interfere with its rendering.</p>

<p>Typically what you'll end up doing is creating a <code>View</code> which wraps the library/plugin you are using. A <code>View</code> contains two import hooks which are <code>didInsertElement</code> and <code>willDestroyElement</code>. From Embers perspective a <code>View</code> is represented by a single DOM element and after this has been inserted into the DOM it will call <code>didInsertElement</code>. We can use this hook to create an instance of the Bootstrap Modal dialog plugin, render it within our container DOM element and hook up any events to corresponding handlers within the view.</p>

<pre><code class="javascript BootstrapModalView.js">App.BootstrapModalView = Ember.View.extend({
  layoutName: "modal_layout",

  backdrop: true,
  keyboard: true,
  backdropClass: "",
  positionSelector: null,
  position: "bottom",

  didInsertElement: function() {
    var controller = this.get("controller"),
      pos, tp, actualWidth, actualHeight;

    this.$(".modal").modal({
      dynamic: true,
      keyboard: this.get("keyboard"),
      backdropClass: this.get("backdropClass")
    });

    this.$(".modal").one("hidden", function() {
      if (controller) {
        controller.send("closeModal");
      }
    });

    // Dialog placement code
    // ...
  },

  close: function() {
    this.$(".modal").modal("hide");

    this.get("controller").send("closeModal");
  }
});
</code></pre>

<ul>
<li><code>layoutName</code> - a layout template can be specified, in our case <code>modal_layout</code> is simply a <code>DIV</code> with its css class set to <code>modal</code>. The <code>{{yield}}</code> keyword is a placeholder that indicates where the view will be rendered within the layout template.</li>
<li><code>backdrop</code> - true/false, sets whether dialog should include a backdrop element.</li>
<li><code>keyboard</code> - true/false, closes the modal when the escape key is pressed.</li>
<li><code>backdropClass</code> - the css class of the backdrop element.</li>
<li><code>positionSelector</code> - the dialog can be displayed relative to another element, this should be a selector expression.</li>
<li><code>position</code> - if position relative to another element this should be one of top, right, bottom or left.</li>
<li><code>didInsertElement</code> - creates an instance of the Bootstrap Modal dialog plugin.</li>
<li><code>close</code> - the <code>errorModal.hbs</code> template triggers this action when it's close button is clicked. We in turn trigger a <code>closeModal</code> which will eventually be handled by the application route.</li>
</ul>


<p>This view can then be simply used as seen below in the <code>errorModal.hbs</code> template.

<figure class='code'><figcaption><span>errorModal.hbs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{{#view App.BootstrapModalView backdropClass=&quot;modal-backdrop-transparent&quot;}}
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;modal-header&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;button</span> <span class="na">type=</span><span class="s">&quot;button&quot;</span> <span class="na">class=</span><span class="s">&quot;close&quot;</span> <span class="err">{{</span><span class="na">action</span> <span class="na">close</span> <span class="na">target=</span><span class="s">&quot;view&quot;</span><span class="err">}}</span><span class="nt">&gt;</span><span class="ni">&amp;times;</span><span class="nt">&lt;/button&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span>  <span class="ni">&amp;lt;</span>h3 id=&quot;modal_error_subject&quot;<span class="ni">&amp;gt;</span>Error<span class="ni">&amp;lt;</span>/h3<span class="ni">&amp;gt;</span>
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nt">&lt;/div&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;modal-body&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;p</span> <span class="na">id=</span><span class="s">&quot;modal_error_text&quot;</span><span class="nt">&gt;</span>Whoops, something has gone wrong!<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;modal-footer&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">class=</span><span class="s">&quot;btn&quot;</span> <span class="err">{{</span><span class="na">action</span> <span class="na">close</span> <span class="na">target=</span><span class="s">&quot;view&quot;</span><span class="err">}}</span><span class="nt">&gt;</span>Close<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>{{/view}}
</span></code></pre></td></tr></table></div></figure>
</p>

<h4>Table list</h4>

<p>With authentication and the modal dialog support in place we can move on to the next page that is required after entering in storage account credentials which is the table listing.</p>

<p>This simply displays a list of the tables that are associated with the storage account.</p>

<pre><code class="javascript TablesRoute.js ">App.TablesRoute = App.AuthenticatedRoute.extend({
  model: function() {
    return App.Tables.find(this.get("credentials"));
  }
}); 
</code></pre>

<ul>
<li><code>model</code> - as we extend from <code>AuthenticatedRoute</code> we have the users storage account credentials available, we then make a call to the JSON API to retrieve a list of tables defined for the account. As we haven't defined a controller Ember will automatically create one, set the model &amp; bind it to the corresponding template.</li>
</ul>


<p>
<figure class='code'><figcaption><span>tables.hbs</p></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;row&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;span9&quot;</span> <span class="na">id=</span><span class="s">&quot;results&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    {{outlet}}
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;span3&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;h1</span> <span class="na">id=</span><span class="s">&quot;accountName&quot;</span><span class="nt">&gt;</span>{{storageAccountName}}<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;tableList&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;nav nav-list&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&quot;nav-header&quot;</span><span class="nt">&gt;</span>Tables<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>      {{#each table in tables}}
</span><span class='line'>        <span class="nt">&lt;li&gt;</span>
</span><span class='line'>          {{#linkTo table.page table App.Page.FIRSTPAGE}}
</span><span class='line'>            {{table.id}}
</span><span class='line'>          {{/linkTo}}
</span><span class='line'>        <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>      {{else}}
</span><span class='line'>        <span class="nt">&lt;li&gt;</span>No tables defined for this storage account.<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>      {{/each}}
</span><span class='line'>      <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&quot;rowDetails&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      {{outlet &quot;selectedRowsOutlet&quot;}}
</span><span class='line'>    <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span>* <span class="ni">&amp;lt;</span>code<span class="ni">&amp;gt;</span>outlet<span class="ni">&amp;lt;</span>/code<span class="ni">&amp;gt;</span> - before a table is selected the <span class="ni">&amp;lt;</span>code<span class="ni">&amp;gt;</span>tables/index.hbs<span class="ni">&amp;lt;</span>/code<span class="ni">&amp;gt;</span> template will be rendered into this outlet.
</span><span class='line'>* <span class="ni">&amp;lt;</span>code<span class="ni">&amp;gt;</span>storageAccountName<span class="ni">&amp;lt;</span>/code<span class="ni">&amp;gt;</span> - the storage account name.
</span><span class='line'>* <span class="ni">&amp;lt;</span>code<span class="ni">&amp;gt;</span>{{#each table in tables}}<span class="ni">&amp;lt;</span>/code<span class="ni">&amp;gt;</span> - renders a list of tables that are defined in the storage account, the <span class="ni">&amp;lt;</span>code<span class="ni">&amp;gt;</span>linkTo<span class="ni">&amp;lt;</span>/code<span class="ni">&amp;gt;</span> helper creates links to the first page of records for the selected table.
</span><span class='line'>* <span class="ni">&amp;lt;</span>code<span class="ni">&amp;gt;</span>selectedRowsOutlet<span class="ni">&amp;lt;</span>/code<span class="ni">&amp;gt;</span> - by default nothing is rendered into this template. It is populated once the user has navigated to a particular table and has selected records. The template <span class="ni">&amp;lt;</span>code<span class="ni">&amp;gt;</span>table/selectedRows.hbs<span class="ni">&amp;lt;</span>/code<span class="ni">&amp;gt;</span> will then be rendered into this outlet.
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>When first loaded Ember will render <span class="ni">&amp;lt;</span>code<span class="ni">&amp;gt;</span>tables/index.hbs<span class="ni">&amp;lt;</span>/code<span class="ni">&amp;gt;</span> into the default <span class="ni">&amp;lt;</span>code<span class="ni">&amp;gt;</span>outlet<span class="ni">&amp;lt;</span>/code<span class="ni">&amp;gt;</span> of the <span class="ni">&amp;lt;</span>code<span class="ni">&amp;gt;</span>tables.hbs<span class="ni">&amp;lt;</span>/code<span class="ni">&amp;gt;</span> template. Once the user selects a table to view the table results will be rendered into the outlet instead.
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;h2&gt;</span>Get started.<span class="nt">&lt;/h2&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>Please select a table on the side to get started.<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span>
</span><span class='line'>####Pagination
</span><span class='line'>When a table is selected the application will navigate to the first page of results, if more results are available then the Azure storage API will include what is known as a continuation token. The continuation token is made up of a partition key and a row key and must be included in the subsequent request in order to obtain the next set of results.
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>App.TablePageRoute = App.AuthenticatedRoute.extend({
</span><span class='line'>  renderTemplate: function() {
</span><span class='line'>    var selectedRowsController = this.controllerFor(&quot;selectedRows&quot;);
</span><span class='line'>    this.render();<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span>this.render(&quot;table/selectedRows&quot;, {
</span><span class='line'>  into: &quot;tables&quot;,
</span><span class='line'>  outlet: &quot;selectedRowsOutlet&quot;,
</span><span class='line'>  controller: selectedRowsController
</span><span class='line'>});
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  },<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  setupController: function(controller, model) {
</span><span class='line'>    var self = this,
</span><span class='line'>      pageId = model.id,
</span><span class='line'>      tableId = this.modelFor(&quot;table&quot;).get(&quot;id&quot;),
</span><span class='line'>      credentials = this.get(&quot;credentials&quot;),
</span><span class='line'>      continuation = this._getPageContinuationToken(pageId - 1);<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span>if (!model.rows) {
</span><span class='line'>  model = App.Page.find(tableId, credentials, pageId, continuation);
</span><span class='line'>
</span><span class='line'>  model.then(function(value) {
</span><span class='line'>    // success
</span><span class='line'>    self._setPageContinuationToken(value.id, value.continuation);
</span><span class='line'>    controller.set(&quot;model&quot;, value);
</span><span class='line'>  }, function(error) {
</span><span class='line'>    // failure
</span><span class='line'>    throw error;
</span><span class='line'>  });
</span><span class='line'>}
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  },<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  model: function(params) {
</span><span class='line'>    var pageId = parseInt(params.page_id, 10) || 1;<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span>return App.Page.create({id: pageId});
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  },<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  _getPageContinuationToken: function(pageId) {
</span><span class='line'>    var continuationToken = null,
</span><span class='line'>      table = this.modelFor(&quot;table&quot;),
</span><span class='line'>      continuationTokens = table.get(&quot;continuationTokens&quot;);<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span>if (continuationTokens) {
</span><span class='line'>  continuationToken =  continuationTokens[pageId];
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>return continuationToken;
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  },<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  _setPageContinuationToken: function(pageId, continuationToken) {
</span><span class='line'>    var table = this.modelFor(&quot;table&quot;),
</span><span class='line'>      continuationTokens = table.get(&quot;continuationTokens&quot;);<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span>if (!continuationTokens) {
</span><span class='line'>  continuationTokens = {};
</span><span class='line'>  table.set(&quot;continuationTokens&quot;, continuationTokens);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>continuationTokens[pageId] = continuationToken;
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  }
</span><span class='line'>});
</span></code></pre></td></tr></table></div></figure>
* <code>renderTemplate</code> - this renders not only the default template but also the <code>table/selectedRows</code> template.
* <code>setupController</code> - this hook is called after the <code>model</code> hook, here we check if the model is fully loaded, if not we get the current continuation token and request the detailed results for the current page.
* <code>model</code> - returns an instance of <code>Page</code> with only the <code>id</code> property set, the model will be fully loaded in <code>setupController</code>.
* <code><em>getPageContinuationToken</code> - gets the current <code>Table</code> and loads the continuation token for the current page of results.
* <code></em>setPageContinuationToken</code> - stores a continuation token for a given page on the <code>Table</code> model instance.</p>

<pre><code class="javascript TablePageController.js">App.TablePageController = Ember.ObjectController.extend({
  toggleRowSelection: function(row) {
    var isSelected = row.get("isSelected") || false;

    row.set("isSelected", !isSelected);
  },

  columns: function() {
    var columns = [],
      excludedColumns = {
        id: true,
        PartitionKey: true,
        RowKey: true,
        isSelected: true,
        partitionKeyChanged: true,
        _: true
      };

    _.each(this.get("rows"), function(element) {
      for(var column in element) {
        if (!element.hasOwnProperty(column)) {
          break;
        }

        if (!excludedColumns[column] &amp;&amp; _.contains(columns, column) !== true) {
          columns.push(column);
        }
      }
    });

    return columns;

  }.property("rows.@each"),

  columnHeaders: function() {
    var columnHeaders = _.clone(this.get("columns"));

    // blank header for "isSelected" column
    columnHeaders.unshift(" ");

    return columnHeaders;
  }.property("columns"),

  paginationLinks: function() {
    var links = [],
      currentPage = this.get("id"),
      startPage = (currentPage &gt; 5) ? (currentPage - 5) : 1,
      endPage = currentPage;

    endPage += this.get("continuation") ? 2 : 1;

    // Create a list of App.Page objects
    // ...

    return links;
  }.property("id")
});
</code></pre>

<ul>
<li><code>toggleRowSelection</code> - toggles the <code>isSelected</code> property for a given row.</li>
<li><code>columns</code> - returns a list of columns that will be displayed in the results table. A common set of properties are excluded from this list.</li>
<li><code>columnHeaders</code> - returns a list of column headers that are displayed in the results table.</li>
<li><code>paginationLinks</code> - a list <code>Page</code> instances that are used to render the pagination links.</li>
</ul>


<p>
<figure class='code'><figcaption><span>table/page.hbs</p></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;table</span> <span class="na">class=</span><span class="s">&quot;table table-condensed&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;thead&gt;</span>
</span><span class='line'>    {{#each column in columnHeaders}}
</span><span class='line'>      <span class="nt">&lt;th&gt;</span>
</span><span class='line'>        <span class="nt">&lt;p&gt;</span>{{column}}<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/th&gt;</span>
</span><span class='line'>    {{/each}}
</span><span class='line'>  <span class="nt">&lt;/thead&gt;</span>
</span><span class='line'>  <span class="nt">&lt;tbody&gt;</span>
</span><span class='line'>  {{#each row in rows}}
</span><span class='line'>
</span><span class='line'>    {{#if row.partitionKeyChanged}}
</span><span class='line'>      <span class="nt">&lt;tr</span> <span class="na">class=</span><span class="s">&quot;partition-key-row&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;td&gt;&lt;/td&gt;</span>
</span><span class='line'>        <span class="nt">&lt;td</span> <span class="na">colspan=</span><span class="s">&quot;2&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>          <span class="nt">&lt;h3&gt;</span>{{row.PartitionKey}}<span class="nt">&lt;/h3&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/td&gt;</span>
</span><span class='line'>        <span class="nt">&lt;td&gt;</span>
</span><span class='line'>          <span class="nt">&lt;p</span> <span class="na">class=</span><span class="s">&quot;text-right&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>            <span class="nt">&lt;small&gt;</span>PARTITION KEY<span class="nt">&lt;/small&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/p&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/td&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>    {{/if}}
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;tr</span>
</span><span class='line'>      <span class="err">{{</span><span class="na">action</span> <span class="err">&quot;</span><span class="na">toggleRowSelection</span><span class="err">&quot;</span> <span class="na">row</span> <span class="na">on=</span><span class="s">&quot;click&quot;</span><span class="err">}}</span>
</span><span class='line'>      <span class="err">{{</span><span class="na">bindAttr</span> <span class="na">class=</span><span class="s">&quot;:master-row row.isSelected:master-row-selected&quot;</span><span class="err">}}</span>
</span><span class='line'>    <span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;td&gt;</span>
</span><span class='line'>        {{view Ember.Checkbox checkedBinding=&quot;row.isSelected&quot; bubbles=false}}
</span><span class='line'>      <span class="nt">&lt;/td&gt;</span>
</span><span class='line'>      {{#each column in ../columns}}
</span><span class='line'>        <span class="nt">&lt;td&gt;</span>
</span><span class='line'>          <span class="nt">&lt;p&gt;</span>
</span><span class='line'>            {{tableCell ../row}}
</span><span class='line'>          <span class="nt">&lt;/p&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/td&gt;</span>
</span><span class='line'>      {{/each}}
</span><span class='line'>    <span class="nt">&lt;/tr&gt;</span>
</span><span class='line'>  {{/each}}
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;/tbody&gt;</span>
</span><span class='line'><span class="nt">&lt;/table&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">&quot;pagination&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>    {{#each pageLink in paginationLinks}}
</span><span class='line'>    <span class="nt">&lt;li</span> <span class="err">{{</span><span class="na">bindAttr</span> <span class="na">class=</span><span class="s">&quot;pageLink.isActive:active pageLink.disabled&quot;</span><span class="err">}}</span><span class="nt">&gt;</span>
</span><span class='line'>        {{#unless pageLink.disabled}}
</span><span class='line'>          {{#linkTo table.page pageLink}}
</span><span class='line'>            {{safeString pageLink.displayText}}
</span><span class='line'>          {{/linkTo}}
</span><span class='line'>        {{/unless}}
</span><span class='line'>
</span><span class='line'>        {{#if pageLink.disabled}}
</span><span class='line'>          <span class="nt">&lt;span</span> <span class="na">class=</span><span class="s">&quot;disabled&quot;</span><span class="nt">&gt;</span>{{safeString pageLink.displayText}}<span class="nt">&lt;/span&gt;</span>
</span><span class='line'>        {{/if}}
</span><span class='line'>    <span class="nt">&lt;/li&gt;</span>
</span><span class='line'>    {{/each}}
</span><span class='line'>  <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span>
</span><span class='line'>
</span><span class='line'>The template above uses a customised version of <span class="ni">&amp;lt;</span>code<span class="ni">&amp;gt;</span>Ember.CheckBox<span class="ni">&amp;lt;</span>/code<span class="ni">&amp;gt;</span> and also a custom Handlebars helper <span class="ni">&amp;lt;</span>code<span class="ni">&amp;gt;</span>tableCell<span class="ni">&amp;lt;</span>/code<span class="ni">&amp;gt;</span>.
</span><span class='line'>
</span><span class='line'>In the template the user is allowed to toggle row selection by either checking the &quot;isSelected&quot; checkbox or by just clicking on the row itself. The problem with the standard <span class="ni">&amp;lt;</span>code<span class="ni">&amp;gt;</span>Ember.CheckBox<span class="ni">&amp;lt;</span>/code<span class="ni">&amp;gt;</span> is that there is no way to stop the click event from bubbling up and subsequently triggering the <span class="ni">&amp;lt;</span>code<span class="ni">&amp;gt;</span>toggleRowSelection<span class="ni">&amp;lt;</span>/code<span class="ni">&amp;gt;</span> action. The customised version below has an extra &quot;bubbles&quot; property which when set to false will disable click event propagation.
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>Ember.Checkbox = Ember.View.extend({
</span><span class='line'>  classNames: [&quot;ember-checkbox&quot;],<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  tagName: &quot;input&quot;,<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  attributeBindings: [&quot;type&quot;, &quot;checked&quot;, &quot;indeterminate&quot;, &quot;disabled&quot;, &quot;tabindex&quot;, &quot;name&quot;],<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  type: &quot;checkbox&quot;,
</span><span class='line'>  checked: false,
</span><span class='line'>  disabled: false,
</span><span class='line'>  indeterminate: false,
</span><span class='line'>  bubbles: true,<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  init: function() {
</span><span class='line'>    this.<span class="nt">&lt;em&gt;</span>super();
</span><span class='line'>    this.on(&quot;change&quot;, this, this.<span class="nt">&lt;/em&gt;</span>updateElementValue);
</span><span class='line'>  },<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  didInsertElement: function() {
</span><span class='line'>    this._super();
</span><span class='line'>    this.get(&quot;element&quot;).indeterminate = !!this.get(&quot;indeterminate&quot;);<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;pre&gt;&lt;code&gt;</span>if (!this.get(&quot;bubbles&quot;)) {
</span><span class='line'>  this.$().click(function(e) {
</span><span class='line'>    e.stopPropagation();
</span><span class='line'>  });
</span><span class='line'>}
</span><span class='line'><span class="nt">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  },<span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;p&gt;</span>  _updateElementValue: function() {
</span><span class='line'>    Ember.set(this, &quot;checked&quot;, this.$().prop(&quot;checked&quot;));
</span><span class='line'>  }
</span><span class='line'>});
</span></code></pre></td></tr></table></div></figure></p>

<p>The other custom item used by the template is a Handlebars helper which is used to specific values for each of the display columns within the row. If the value is a valid date then it is formatted using the <a href="http://momentjs.com/">moment.js</a> library.
<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Ember</span><span class="p">.</span><span class="nx">Handlebars</span><span class="p">.</span><span class="nx">helper</span><span class="p">(</span><span class="s2">&quot;tableCell&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">row</span><span class="p">,</span> <span class="nx">column</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">value</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">columnName</span> <span class="o">=</span> <span class="nx">column</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">keywords</span><span class="p">.</span><span class="nx">column</span><span class="p">;</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="k">if</span> <span class="p">(</span><span class="nx">row</span><span class="p">[</span><span class="nx">columnName</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">value</span> <span class="o">=</span> <span class="nx">row</span><span class="p">[</span><span class="nx">columnName</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="k">if</span> <span class="p">(</span><span class="nx">moment</span><span class="p">(</span><span class="nx">value</span><span class="p">).</span><span class="nx">isValid</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">value</span> <span class="o">=</span> <span class="nx">moment</span><span class="p">(</span><span class="nx">value</span><span class="p">).</span><span class="nx">calendar</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span>  <span class="k">return</span> <span class="nx">value</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The final items to look at are the controller and template for selected items. As shown above the <code>TablePageRoute</code> renders this into the <code>selectedRowsOutlet</code> of the <code>tables.hbs</code>.</p>

<pre><code class="javascript SelectedRowsController.js">App.SelectedRowsController = Ember.ObjectController.extend({
  tablePage: null,
  needs: "tablePage",
  tablePageBinding: "controllers.tablePage",
  currentIndex: 0,

  selectedRows: function() {
    var rows = this.get("tablePage").get("rows"),
      selectedRows = _.where(rows, {isSelected: true});

    if (selectedRows.length &lt;= this.get("currentIndex") &amp;&amp; selectedRows.length &gt; 0) {
      this.set("currentIndex", selectedRows.length - 1);
    }

    return selectedRows;
  }.property("tablePage.rows.@each.isSelected"),

  hasSelectedRows: function() {
    return (this.get("selectedRows").length &gt; 0);
  }.property("selectedRows"),

  moveNext: function() {
    var currentIndex = this.get("currentIndex");

    if (currentIndex &lt; (this.get("selectedRows").length - 1)) {
      this.set("currentIndex", currentIndex + 1);
    }
  },

  movePrevious: function() {
    var currentIndex = this.get("currentIndex");

    if (currentIndex &gt; 0) {
      this.set("currentIndex", currentIndex - 1);
    }
  },

  moveNextEnabled: function() {
    return (this.get("currentIndex") &lt; (this.get("selectedRows").length) - 1);
  }.property("currentIndex", "selectedRows"),

  movePreviousEnabled: function() {
    return (this.get("currentIndex") &gt; 0);
  }.property("currentIndex"),

  currentRow: function() {
    return this.get("selectedRows")[this.get("currentIndex")];
  }.property("selectedRows", "currentIndex"),

  currentDisplayIndex: function() {
    return this.get("currentIndex") + 1;
  }.property("currentIndex")

});
</code></pre>

<ul>
<li><code>tablePage</code> - we have a dependency on the table page controller, Ember will wire up a reference to this property.</li>
<li><code>needs</code> - defines <code>tablePage</code> as a dependency.</li>
<li><code>tablePageBinding</code> - sets the binding that will be used to wire <code>tablePage</code>.</li>
<li><code>currentIndex</code> - the index of the record being displayed.</li>
<li><code>selectedRows</code> - a list of all the rows that are currently selected on the table details page.</li>
<li><code>hasSelectedRows</code> - true/false if there are any selected rows.</li>
<li><code>moveNext</code> - displays the next selected record.</li>
<li><code>movePrevious</code> - displays the previous selected record.</li>
<li><code>moveNextEnabled</code> - true/false if there is another record to display.</li>
<li><code>movePreviousEnabled</code> - true/false if there is a previous record to display.</li>
<li><code>currentRow</code> - the current record.</li>
<li><code>currentDisplayIndex</code> - the index of the current record as displayed to the user.</li>
</ul>


<p>
``` html table/selectedRows.hbs</p>

<p>&nbsp;</p>


<ul {{bindAttr class=":nav :nav-list hasSelectedRows:show:hide"}}>
    <li class="nav-header">
       <span>ROW DETAILS</span>
       <span>({{currentDisplayIndex}}/{{selectedRows.length}})</span>
       <span class="pull-right">
           <i {{action "movePrevious" on="click"}} {{bindAttr class=":icon-btn :icon :icon-chevron-left movePreviousEnabled:enabled:disabled"}}></i>
           <i {{action "moveNext" on="click"}} {{bindAttr class=":icon-btn :icon :icon-chevron-right moveNextEnabled:enabled:disabled"}}></i>
       </span>
    </li>
    <li>
       {{#with currentRow}}
        <small>
            <p>
              <strong>ID</strong>
              <br/>
              {{input type="text" value=_.id disabled=true}}
            </p>
            <p>
              <strong>Timestamp</strong>
              <br/>
              <span>{{Timestamp}}</span>
            </p>
            <p>
              <strong>Link</strong>
              <br/>
              {{input type="text" value=_.link disabled=true}}
            </p>
            <p>
              <strong>Updated</strong>
              <br/>
              <span>{{_.updated}}</span>
            </p>
            <p>
              <strong>ETag</strong>
              <br/>
              <span>{{_.etag}}</span>
            </p>
        </small>
        {{/with}}
    </li>
</ul>


<p>```
</p>

<h4>Look ma, no unit tests!</h4>

<p>So that's enough for this morning, it's not quite fully complete but getting there. Yes there aren't any unit tests, I suck. Also I haven't implemented the record deletion seen in Jeff's app and there is also a problem with URLs regarding pagination.</p>

<p>One of the core tenants of Ember is that you should be able to reload an app or share a link with someone and be able get back to exactly that point within the application. As they say this is one of the great things about the web and a major advantage we have over native applications.</p>

<p>Due to the way paging works on Azure tables it isn't possible to restore the application back to particular page based on the URL structure I have in place. I could always embed the continuation tokens within the URL or come up with a workaround but that's for another day.</p>

<ul>
<li>The source for the app is here <a href="http://github.com/ronnieDrew/azure-table-explorer">http://github.com/ronnieDrew/azure-table-explorer</a></li>
<li>And a live version is on Azure websites <a href="https://ember-waztable.azurewebsites.net">https://ember-waztable.azurewebsites.net</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
